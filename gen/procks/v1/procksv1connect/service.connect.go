// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: procks/v1/service.proto

package procksv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/nicjohnson145/procks/gen/procks/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProcksServiceName is the fully-qualified name of the ProcksService service.
	ProcksServiceName = "procks.v1.ProcksService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProcksServiceConnectProcedure is the fully-qualified name of the ProcksService's Connect RPC.
	ProcksServiceConnectProcedure = "/procks.v1.ProcksService/Connect"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	procksServiceServiceDescriptor       = v1.File_procks_v1_service_proto.Services().ByName("ProcksService")
	procksServiceConnectMethodDescriptor = procksServiceServiceDescriptor.Methods().ByName("Connect")
)

// ProcksServiceClient is a client for the procks.v1.ProcksService service.
type ProcksServiceClient interface {
	Connect(context.Context, *connect.Request[v1.ConnectRequest]) (*connect.ServerStreamForClient[v1.ConnectResponse], error)
}

// NewProcksServiceClient constructs a client for the procks.v1.ProcksService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProcksServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProcksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &procksServiceClient{
		connect: connect.NewClient[v1.ConnectRequest, v1.ConnectResponse](
			httpClient,
			baseURL+ProcksServiceConnectProcedure,
			connect.WithSchema(procksServiceConnectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// procksServiceClient implements ProcksServiceClient.
type procksServiceClient struct {
	connect *connect.Client[v1.ConnectRequest, v1.ConnectResponse]
}

// Connect calls procks.v1.ProcksService.Connect.
func (c *procksServiceClient) Connect(ctx context.Context, req *connect.Request[v1.ConnectRequest]) (*connect.ServerStreamForClient[v1.ConnectResponse], error) {
	return c.connect.CallServerStream(ctx, req)
}

// ProcksServiceHandler is an implementation of the procks.v1.ProcksService service.
type ProcksServiceHandler interface {
	Connect(context.Context, *connect.Request[v1.ConnectRequest], *connect.ServerStream[v1.ConnectResponse]) error
}

// NewProcksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProcksServiceHandler(svc ProcksServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	procksServiceConnectHandler := connect.NewServerStreamHandler(
		ProcksServiceConnectProcedure,
		svc.Connect,
		connect.WithSchema(procksServiceConnectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/procks.v1.ProcksService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProcksServiceConnectProcedure:
			procksServiceConnectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProcksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProcksServiceHandler struct{}

func (UnimplementedProcksServiceHandler) Connect(context.Context, *connect.Request[v1.ConnectRequest], *connect.ServerStream[v1.ConnectResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("procks.v1.ProcksService.Connect is not implemented"))
}
